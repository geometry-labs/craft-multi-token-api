version: '3.7'

# Enviroment variables for rest-api
x-rest-api-env: &rest-api-env
  # Prefix
  PREFIX: "/api/v1"

  # Mongo
  MONGO_SERVER: "mongodb"
  MONGO_PORT: 27017
  MONGO_USERNAME: "mongo"
  MONGO_PASSWORD: "changethis"

  # Metrics
  METRICS_PORT: 9401

  # Icon
  CALLER_ADDRESS: ${CALLER_ADDRESS:-hx33908de1715f15511d4d7503f0fed22e8e60fdc2}
  CRAFT_MULTI_TOKEN_CONTRACT_ADDRESS: ${CRAFT_MULTI_TOKEN_CONTRACT_ADDRESS:-cx4c0d460e551cab0aeda64fb90e80fb7ec948c22a}

  # Enviroment variables for websocket-api
x-websocket-api-env: &websocket-api-env
  # Prefix and port
  PREFIX: "/ws"
  PORT: 3000

  # Kafka
  BROKER_URL: "kafka:9092"
  TOPICS: "craft-multi-token-contract"

# Enviroment variables for contract-workers
x-worker-env: &worker-env
  # Kafka config
  KAFKA_SERVER: kafka:9092

  # Kafka topics
  TRANSACTIONS_TOPIC: transactions                               # Input
  LOGS_TOPIC: logs                                               # Input
  CRAFT_MULTI_TOKEN_CONTRACT_TOPIC: craft-multi-token-contract   # Output

  # Icon addresses
  CALLER_ADDRESS: ${CALLER_ADDRESS:-hx33908de1715f15511d4d7503f0fed22e8e60fdc2}
  CRAFT_MULTI_TOKEN_CONTRACT_ADDRESS: ${CRAFT_MULTI_TOKEN_CONTRACT_ADDRESS:-cx4c0d460e551cab0aeda64fb90e80fb7ec948c22a}

services:
  #######
  # Proxy
  #######
  traefik:
    image: traefik:${TRAEFIK_TAG:-v2.4}
    container_name: "traefik"
    hostname: "traefik"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik.yml:/traefik.yml:ro"

  ################
  # Admin
  ################
  control-center:
    image: confluentinc/cp-enterprise-control-center:5.5.1
    hostname: control-center
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: 'schemaregistry:8081'
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    networks:
      - default

  connect-ui:
    image: landoop/kafka-connect-ui
    container_name: connect-ui
    depends_on:
      - connect
    ports:
      - "8001:8000"
    environment:
      - "CONNECT_URL=http://connect:8083"

  ###########
  # APIs
  ###########
  rest-api:
    build:
      context: ./src/rest-api
      target: prod
    ports:
      - "8888:80"
      - "9401:9401"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rest-api.rule=PathPrefix(`/api/v1`)"
      - "traefik.port=80"
    depends_on:
      - mongodb
    environment:
      <<: *rest-api-env

  websocket-api:
    build:
      context: ./src/websocket-api
      target: prod
    ports:
      - "3000:3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kafka-websocket.rule=PathPrefix(`/ws`)"
      - "traefik.webservice.frontend.entryPoints=http,ws"
      - "traefik.port=3000"
    depends_on:
      - kafka
    environment:
      <<: *websocket-api-env
        
  ################
  # ICON Streaming
  ################
  icon-etl:
    image: geometrylabs/iconetl:${ICON_ETL_TAG:-latest}
    command: [
      "stream",
      "-o", "kafka:9092",
      "--period-seconds", "1",
      "--values-as-hex", "True",
      #"-b", "100",
      #"-B", "100",
      "-p", "https://bicon.net.solidwallet.io/api/v3",
    ]
    volumes:
      - "./icon-etl/last_synced_block.txt:/icon-etl/last_synced_block.txt"
    restart: on-failure

  ###############
  # Kafka Workers
  ###############
  transactions-contract-worker:
    build:
      context: ./src/contract-worker
      target: prod
    restart: on-failure
    #ports:
      #- "9400:9400"
    depends_on:
      - kafka
    environment:
      LOGGING_LEVEL: DEBUG
      WORKER_MODE: TRANSACTIONS_WORKER
      <<: *worker-env

  logs-contract-worker:
    build:
      context: ./src/contract-worker
      target: prod
    restart: on-failure
    #ports:
      #- "9400:9400"
    depends_on:
      - kafka
    environment:
      LOGGING_LEVEL: DEBUG
      WORKER_MODE: LOGS_WORKER
      <<: *worker-env

  ###########
  # Databases
  ###########
  mongodb:
    image: mongo:${MONGO_TAG:-latest}
    ports:
      - "27017:27017"
    volumes:
      - ./mongodb:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: "mongo"
      MONGO_INITDB_ROOT_PASSWORD: "changethis"
   
  #######
  # Kafka
  #######
  zookeeper:
    # Zookeeper for kafka
    image: confluentinc/cp-zookeeper:${CP_ZOOKEEPER_TAG:-latest}
    hostname: zookeeper
    environment:
      zk_id: "1"
      ZOOKEEPER_CLIENT_PORT: 2181
  
  kafka:
    # Kafka
    image: confluentinc/cp-enterprise-kafka:${CP_ENTERPRISE_KAFKA_TAG:-latest}
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_BROKER_RACK: "r1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_SCHEMA_REGISTRY_URL: "schemaregistry:8081"
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: "schemaregistry:8081"
      KAFKA_JMX_PORT: 9991
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
  
 
  schemaregistry:
    # Kafka schema registry - used to store schemas for kafka connect
    image: confluentinc/cp-schema-registry:${CP_SCHEMA_REGISTRY_TAG:-latest}
    hostname: schemaregistry
    container_name: schemaregistry
    depends_on:
      - zookeeper
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,OPTIONS'
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
  

  connect:
    # Kafka connect - used to tail data from topics into databases
    image: confluentinc/cp-kafka-connect:${CP_KAFKA_CONNECT_TAG:-5.5.3}
    hostname: connect
    container_name: connect
    depends_on:
      - zookeeper
      - kafka
      - schemaregistry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONNECT_SCHEMA_REGISTRY_URL: 'http://schemaregistry:8081'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schemaregistry:8081'
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schemaregistry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
    volumes:
      - ./connect/jars:/etc/kafka-connect/jars
  

  kafka-topic-init:
    # Initialization container for kafka topics
    image: geometrylabs/kafka-topics-init:${KAFKA_TOPIC_INIT_TAG:-latest}
    depends_on:
      - kafka
      - schemaregistry
    volumes:
      - ./kafka/topics/:/topics/
    restart: on-failure
    environment:
      KAFKA_URL: 'kafka:9092'
      KAFKA_SCHEMA_REGISTRY_URL: 'schemaregistry:8081'
      KAFKA_TOPIC_INIT_TOPICS_PATH: '/topics/topics.json'
  
  
  kafka-connect-init:
    # Initialization container for schema registry topics
    image: geometrylabs/kafka-connect-init:${KAFKA_CONNECT_INIT_TAG:-latest}
    depends_on:
      - connect
    volumes:
      - ./kafka/connect/:/connectors/
    restart: on-failure
    environment:
      KAFKA_CONNECT_URL: "connect:8083"
      KAFKA_CONNECT_INIT_TIMEOUT: "120"
      KAFKA_CONNECT_INIT_CONNECTORS_PATH: "/connectors/"

